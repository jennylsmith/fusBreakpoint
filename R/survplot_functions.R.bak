#Jenny Smith

#march 30, 2017
#Purpose: Create a list of survival analyses and Given survival package Survfit() object, plot the survival curves and calculate the P values for differences in survival.


#Survival plot without gridlines.
#' Survival Kaplan-Meier plot without gridlines.
#'
#' @param fit
#' @param LegendTitle
#' @param timeUnit
#' @param colors
#' @param pval
#' @param max.year
#'
#' @return
#' @export
#'
#' @examples
SurvivalPlot <- function(fit, LegendTitle, timeUnit, colors,pval=NULL,max.year=NULL){
  #fit the output of the survFit() function.
  #legend title is a character vector which will be the plot legend title.
  #timeUnit is a character vector for the follow-up time in days, years, months etc.
  #colors is a character vector the same length as the number of groups.
  #max.year is the time (singe numeric) in years to end the plot at.

  require(survival)
  library(ggplot2)
  library(GGally)

  if(is.null(pval)){
    pval <- ""
  }else{
    pval <- paste0("p = ",pval)
  }

  if(!is.null(max.year)){
    # if(max(fit$time) < max.year){
    pos.x <- max.year
    # }
  }else{
    pos.x <- max(fit$time)
  }

  if(is.null(fit$strata)){
    lm <- 1 #left margin (lm)
    rm <- 4  #right margin(rm)
    num.cols <- 1
    num.rows <- 1

    #main survival plot
    p <- ggsurv(fit, surv.col = colors,
                cens.col=colors, CI=FALSE,
                lty.est = 1, size.est = 1.25,
                cens.size = 2.0,order.legend=FALSE)

  }else{

    m <- max(nchar(gsub("^.+\\=(.+)", "\\1", names(fit$strata)))) #maximum number of characters
    d <- length(fit$strata) #how many groups
    lm <- case_when(m <= 2 ~ 0.90,
                    m <= 5 ~ 1.25,
                    m > 5 & m <= 8 ~ 1.75,
                    m > 8 & m < 13 ~ 2.75,
                    m >= 13 & m < 17 ~ 3.4,
                    m >= 17 ~ 4.0)#left margin (lm)
    rm <- case_when(d <= 4 ~ 1.5, d > 4 ~ 2.0) #right margin(rm)
    num.cols <- 2
    num.rows <- 2

    if(d > 4 & d < 7){
      num.rows <- 3
    }else if(d > 7 & d <= 18){
      num.cols <- 3
      num.rows <- 6
    }else if(d > 18){
      num.cols <- 5
      num.rows <- 5
    }

    if(num.cols*num.rows < d){
      num.rows <- 10
    }

    #main survival plot
    p <- ggsurv(fit, surv.col = colors, CI=FALSE,
                lty.est = 1, size.est = 1.25,
                cens.size = 2.0,order.legend=FALSE)
  }

  #customize the plot
  p <- p +
    labs(y= "Fraction Surviving", x = paste(timeUnit, "Follow-up")) +
    scale_y_continuous(limits = c(0,1),
                       breaks = seq(0,1,0.2),
                       minor_breaks = NULL) +
    scale_x_continuous(limits = c(0,pos.x),
                       breaks = seq(0,pos.x, 2)) +

    theme(plot.title = element_text(hjust = 0.5, size=18),
          panel.background = element_rect(fill="white"),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          panel.border = element_rect(colour = "black", fill= NA, size=1.0),

          axis.text = element_text(colour = "black"),
          axis.text.y = element_text(size = 18),
          axis.text.x = element_text(size=18),
          axis.title = element_text(size = 18),
          legend.position = "top",
          legend.direction  = "horizontal",
          legend.margin = margin(0,0,0,0, unit = "pt"),
          legend.text = element_text(size=12),
          legend.title = element_text(size=10),
          legend.key=element_blank()) +

    theme(plot.margin = margin(0, rm,.5,lm,unit="cm")) +
    annotate(geom="text", x=1, y=0.05, label=pval, size=5) +
    guides(color=guide_legend(ncol=num.cols, nrow=num.rows))

  if (length(colors) > 1){
    p$scales$scales[[1]]$name <- LegendTitle
    p$scales$scales[[2]]$name <- LegendTitle
  }

  return(p)
}


#risk table dataframe
#' Title
#'
#' @param survFit.obj
#' @param f.levels
#' @param times
#' @param col
#' @param ret.data
#' @param max.year
#'
#' @return
#' @export
#'
#' @examples
risk.table <- function(survFit.obj, f.levels=NULL, times=NULL,col="black",
                       ret.data=FALSE, max.year=NULL){
  #survFit.obj is the results  survfit()
  #f.levels is an optional character vector to relevel the order of the groups, if desired. else levels is alphabetical
  #times would be a seperate numeric vector, with years/x-axis breaks points, if desired.

  if(!is.null(max.year)){
    # if (max(survFit.obj$time) < max.year){
      times <- seq(0,max.year, by= 2)
      xlims <- max.year
    # }
  }else{
    times <- seq(0,max(survFit.obj$time), by= 2)
    xlims <- max(survFit.obj$time)
  }

  #Summary dataframe with the selected time points to get % OS/ EFS for plot x-axis
  summ <- summary(survFit.obj, times=times, extend=TRUE)


  if(is.null(f.levels)){
    f.levels <- unique(as.character(summ$strata)) %>%
      gsub("^.+\\=(.+)", "\\1", .)
  }

  #Create a new dataframe to hold the time,KM estimate and strata for plotting
  risk.df <- bind_cols(list(time=summ$time,
                            surv=summ$surv,
                            n.risk=summ$n.risk,
                            Group=as.character(summ$strata))) %>%
    set_colnames(c("time","surv","N.Risk","Group")) %>%
    mutate(Group=gsub("^.+\\=(.+)", "\\1", Group),
           Group=factor(Group, levels = f.levels))


  if(ret.data){
    return(risk.df)
  }

  #variable for deciding length of margins. longer group names would need more space.
  m <- max(nchar(levels(risk.df$Group))) # print(c("length:", m))
  d <- length(levels(risk.df$Group))
  lm <- case_when(m <= 5 ~ 1.75,
                  m > 5 & m <= 8 ~ 1.35,
                  m > 8 & m <= 10 ~ 1.25,
                  m > 10 & m < 13 ~ 1.10,
                  m >= 13 ~ 1.20)

  rm <- case_when(d <= 5 ~ 1.5,
                  m > 5 ~ 2.0)


  #gglot the risk table (risk.df)
  tbl <- ggplot(risk.df, aes(x = time, y = Group, label=N.Risk)) +
    geom_text(size = 5)  +
    theme_bw()  +
    scale_x_continuous("Number at risk",
                       limits = c(0,xlims),
                       breaks = times) +
    xlab(NULL) +
    ylab(NULL) +
    theme(panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          panel.border = element_blank(),
          legend.position="none",
          axis.line = element_line(size=0.7, color="black"),
          axis.title.x = element_text(size=18),
          axis.ticks.x = element_blank(),
          axis.title.y = element_blank(),
          axis.text.x = element_blank(),
          axis.text.y = element_text(face="bold",
                                     size=14,
                                     color= col[levels(risk.df$Group)],
                                     hjust=1)) +
    #of note: this margin is still not perfect..... the size of window in Rstudio is different than what actually shows up on the tiff...
    theme(plot.margin = margin(-1.5, rm, 0.1, lm, unit="cm"))




  return(tbl)
}


#a wrapper function to quickly create multiple KM plots for OS/EFS
#the output is stored as a tibble dataframe
#note: dplyr::do() is deprecated. I will need to see how to modify this appropriately before it completely breaks...
#' Title
#'
#' @param df
#' @param group_vars
#' @param type
#' @param covariate
#' @param cohort
#' @param cc
#' @param riskTable
#' @param f.levels
#' @param max.year
#' @param custom_cols
#'
#' @return
#' @export
#'
#' @examples
KM.plots <- function(df, group_vars=NULL, type="OS",
                     covariate,
                     cohort,cc=NULL,
                     riskTable=TRUE,
                     f.levels=NULL,
                     max.year=NULL,
                     custom_cols=NULL){
  library(dplyr)
  library(tibble)
  library(survival)
  library(magrittr)
  library(tidyr)
  suppressPackageStartupMessages(require(gridExtra))

  #df is the cleaned CDE with patient IDs as rownames.
  #group_vars is a character vector of a column name to group_by() in dplyr.
  #type is "OS" for OS/EFS or "EOI" for end of induction time points
  #covariate is a character string for the column in CDE to be the explanatory variable
  #cohort is for "0531" or "1031" (different colnames)

  #Define KM estimates for survival analysis
  if (cohort == "0531" & type=="OS"){
    os.est <- "Surv(Overall.Survival.Time.in.Days/365.25, OS.ID)"
    efs.est <- "Surv(Event.Free.Survival.Time.in.Days/365.25, Event.ID)"
  }else if (cohort == "1031" & type=="OS"){
    os.est <- "Surv(OS.time..days./365.25, OS.ID)"
    efs.est <- "Surv(EFS.time..days./365.25, Event.ID)"
  }else if (cohort == "TCGA" & type=="OS"){
    os.est <- "Surv(OS.months..3.31.12/12, clinData1.vital_status)"
    efs.est <- "Surv(EFS.months....3.31.12/12, first.event)"
  }else if (type=="EOI"){
    if(is.null(custom_cols)){message("Need custom columnames for time and event for EOI analyses.
                                     Custom calls must a list of 2 names os.est and efs.est containing vector of
                                     time column in days and event.type indicator column as 0,1 in that order.");
      return(custom_cols)}
    os.est <- paste0("Surv(",custom_cols[["os.est"]][1],"/365.25",", ",custom_cols[["os.est"]][2], ")")
    efs.est <- paste0("Surv(",custom_cols[["efs.est"]][1],"/365.25",", ",custom_cols[["efs.est"]][2], ")")
  }

  #Formula for KM curves
  OS.form <- as.formula(paste(os.est,' ~ ',covariate))
  EFS.form <- as.formula(paste(efs.est,' ~ ', covariate))

  #function for colors
  colorcodes <- function(df,covariate){
    strata <- unlist(unique(df[,covariate])) #Unique groups (strata)
    strata <- strata[order(strata)] #ensure the alphabetical order
    len <- length(strata)

    if ( ! is.null(cc)){
      return(cc)

    }else{
      colors <- c("dodgerblue4", "brown3", "darkgoldenrod3",
                  "deepskyblue1",
                  "azure4", "darkmagenta",
                  "turquoise4", "green4",
                  "deeppink", "navajowhite2","chartreuse2","lightcoral",
                  "mediumorchid", "saddlebrown", "#466791","#60bf37","#953ada",
                  "#4fbe6c","#ce49d3","#a7b43d","#5a51dc",
                  "#d49f36","#552095","#507f2d","#db37aa",
                  "#84b67c","#a06fda","#df462a","#5b83db",
                  "#c76c2d","#4f49a3","#82702d","#dd6bbb",
                  "#334c22","#d83979","#55baad","#dc4555",
                  "#62aad3","#8c3025","#417d61","#862977",
                  "#bba672","#403367","#da8a6d","#a79cd4",
                  "#71482c","#c689d0","#6b2940","#d593a7","#895c8b","#bd5975")
      cc <- NULL
      for ( i in 1:len){
        c <- colors[i]
        cc <- c(cc,c)
      }
      names(cc) <- strata
      return(cc)
    }
  }


  #perform survival analysis for all factor levels
  grouped.df <-  df %>%
      # group_by(Subgroups) %>%
      group_by(!!! rlang::syms(group_vars)) %>%
      do(OS.cox=coxph(OS.form, data = .),
         OS.fit=survfit(OS.form, data=.),
         OS.diff=survdiff(OS.form, data=.), #survdiff for log-rank p-value
         OS=SurvivalPlot(survfit(OS.form, data=.), #survival plots
                         LegendTitle = covariate,
                         timeUnit = "Years",
                         max.year = max.year,
                         colors =  colorcodes(.,covariate = covariate)),

         EFS.cox=coxph(EFS.form, data = .),
         EFS.fit=survfit(EFS.form, data=.),
         EFS.diff=survdiff(EFS.form, data=.), #survdiff for log-rank p-value
         EFS=SurvivalPlot(survfit(EFS.form, data=.),
                          LegendTitle= covariate,
                          timeUnit= "Years",
                          max.year = max.year,
                          colors= colorcodes(., covariate = covariate)))

    if(is.null(group_vars)){
      grouped.df <- add_column(grouped.df, Group="AML",.before = 1)
    }else{
      col.idx <- which(colnames(grouped.df)=="OS.cox")-1
      grouped.df <- unite(grouped.df,
                          "Group",1:all_of(col.idx), remove = FALSE, sep=" in ")
    }


  #function to calculate a p-value
  pvalue <- function(survdiff.res){
    p <- pchisq(survdiff.res$chisq, df=length(survdiff.res$n) - 1, lower=FALSE)
    p <- ifelse(p < 0.001, "p < 0.001", paste0("p = ", round(p, digits = 3)))
    return(p)
  }

  #Function to extract N of cohort.
  groupSize <- function(survdiff.res){paste0("N = ", sum(survdiff.res$n))}

  #Update the survial plots with an informative title and p values, and group N
  types <- c("Relapse", "Failure", "OS", "EFS")
  plots <- which(colnames(grouped.df) %in% types)

  #for each row (nrow > 1, when grouping variable given)
  for ( i in 1:nrow(grouped.df)){

    #for each OS/EFS column
    for (plot.idx in plots){
      idx.logrank <- plot.idx-1
      N <- groupSize(grouped.df[[idx.logrank]][[i]])
      pval <- pvalue(grouped.df[[idx.logrank]][[i]]) %>%
        paste(.,N, sep="\n")

      #Add Main Title that is the column name (eg Relapse,OS, EFS, etc) and grouping factors
      grouped.df[[plot.idx]][[i]]$labels$title <- paste(names(grouped.df[plot.idx]),
                                                        grouped.df[["Group"]][i],
                                                        sep = ": ")

      #Add P value and the N
      grouped.df[[plot.idx]][[i]] <- grouped.df[[plot.idx]][[i]] +
        annotate(geom="text", x=1, y=0.05, label=pval, size=5) +
        theme(plot.title = element_text(face="bold"))

      if(riskTable){

        fit.idx <- plot.idx-2
        fit <- grouped.df[[fit.idx]][[i]]
        risk.tab <- risk.table(survFit.obj = fit,
                               ret.data = TRUE)
        risk.tab.p <- risk.table(survFit.obj = fit,
                                 col = cc,
                                 f.levels = f.levels,
                                 max.year=max.year)

        # Create a blank plot for place-holding
        blank.pic <- ggplot(risk.tab, aes(time, surv)) +
          geom_blank() +
          theme_bw() +
          theme(axis.text.x = element_blank(),
                axis.text.y = element_blank(),
                axis.title.x = element_blank(),
                axis.title.y = element_blank(),
                axis.ticks = element_blank(),
                panel.grid = element_blank(),
                panel.border = element_blank())


      # grid.arrange(grouped.df[[plot.idx]][[i]], blank.pic, risk.tab.p, clip = FALSE, nrow = 3,
      #                    ncol = 1, heights = unit(c(2, .1, .25), c("null", "null", "null")))

       grouped.df[[plot.idx]][[i]] <-  arrangeGrob(grouped.df[[plot.idx]][[i]],
                                                   blank.pic, risk.tab.p,
                                                   clip = FALSE,
                                                   nrow = 3, ncol = 1,
                                                   heights = unit(c(2, .2, .4),
                                                                  c("null", "null", "null")))

      }
    }
  }

  return(grouped.df)
}


#Function to save the outputs from KM.plots()
#' Title
#'
#' @param KM.plots.res
#' @param w
#' @param h
#'
#' @return
#' @export
#'
#' @examples
saveMultiPlots <- function(KM.plots.res,w=8,h=5){
  #This is for the relapse results from KM.plots()

  N <- nrow(KM.plots.res)

  covar <- function(i){
    names(KM.plots.res[grep("diff",colnames(KM.plots.res))][[i,1]]$n) %>%
      str_split_fixed(.,pattern="=",n=2) %>% .[,1] %>% unique()
  }

  name <- function(i){paste(KM.plots.res[[1]][i],covar(i),col,"KMplot.tiff", sep="_")}
  cols <- grep("diff",colnames(KM.plots.res), value = TRUE, invert = TRUE)[-1]

  for (col in cols){
    lapply(1:N, function(x) ggsave(filename = name(x),
                                   plot = KM.plots.res[[col]][[x]],
                                   device = "tiff",
                                   width = w,
                                   height = 5,
                                   dpi=600))

  }
}


#create a simple summary table for the cox regression
#' Title
#'
#' @param coxph.res
#' @param Colname
#'
#' @return
#' @export
#'
#' @examples
coxSummaryTable <- function(coxph.res,Colname="Group"){
  c.mod <- coxph.res
  c.summ <- summary(coxph.res)
  c.table <- as.data.frame(c.summ$coefficients) %>% cbind(.,as.data.frame(c.summ$conf.int))
  # c.table
  c.HR <- round(c.table$`exp(coef)`, digits=3)
  c.CI <- paste(round(c.table$`lower .95`,digits=3),round(c.table$`upper .95`, digits = 3), sep="-")
  c.pVal <- round(c.table$`Pr(>|z|)`, digits=3)

  comp <- gsub("^.+(Yes|No|Unknown|High|Low)", "\\1",names(c.mod$coefficients))
  c.stats <- data.frame(names(c.mod$coefficients) ,comp, c.HR, c.CI, c.pVal)
  colnames(c.stats) <- c("Variable", Colname,"Hazard Ratio", "95% Confidence Interval", "P-value")
  # rownames(c.stats) <- names(c.mod$coefficients)

  return(c.stats)
}



#functions to calculate the p-value for differnces in KM curves from survdiff() function
#Tests if there is a difference between two or more survival curves using the G-rho family of tests, or for a single curve against a known alternative.
#' Title
#'
#' @param survdiff
#' @param digits
#'
#' @return
#' @export
#'
#' @examples
calc_KMcurve_pvalues <- function(survdiff, digits=3){
  p <-  pchisq(survdiff$chisq, length(survdiff$n)-1,
              lower.tail = FALSE) %>%
    round(.,  digits = digits)

  return(p)
}



#create a table with OS/EFS percent at specified time point
#uses the summary() function on the survfit() object
#can optionally input p-values manually from survdiff() function
#' Title
#'
#' @param fit
#' @param time
#' @param pvalues
#'
#' @return
#' @export
#'
#' @examples
outcome_table <- function(fit, time=5, pvalues=NULL){

  summ <- summary(fit, times=time)
  type <- ifelse(any(grepl("OS", summ$call)),"OS","EFS")
  summ <- summ[!grepl("table|std.chaz|call", names(summ))]
  summ <- summ[sapply(summ,length)==length(summ$strata)]

  surv_col <- paste("Percent", type)
  n <- length(summ$strata)

  tab <- tibble(as.data.frame(summ)) %>%
    mutate_at(vars(surv,lower,upper,std.err), ~round(.*100, digits = 2)) %>%
    mutate(Group=str_split_fixed(strata, pattern = "=", n=2)[,2])


  if(!is.null(pvalues) & length(pvalues) < n){
    pval_ref <- NA #ref is the first position in the strata
    pvalues=c(pval_ref, pvalues) #must be in same order as strata in the survift()!
    tab <- tab %>%
      add_column(pvalue=pvalues)

    tab <- tab %>%
      select(Group,
             "Number Patients per Group"=n,
             "Time (years)"=time,
             !!surv_col := surv,
             "Lower 95% CI"=lower,
             "Upper 95% CI"=upper,
             "Standard Error"=std.err,
             "p-value"=pvalue)
  } else{

    tab <- tab %>%
      select(Group,
             "Number Patients per Group"=n,
             "Time (years)"=time,
             !!surv_col := surv,
             "Lower 95% CI"=lower,
             "Upper 95% CI"=upper,
             "Standard Error"=std.err)

  }


  return(tab)
}

